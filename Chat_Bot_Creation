{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "12d057c0-0db2-442c-8ea2-1f0a84f059eb",
   "metadata": {},
   "source": [
    "## Pattern Matching Chatbot with Fallback:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b72bb9f0-8dbb-458c-ba7f-f55ba007875f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import necessary libraries\n",
    "import re\n",
    "import logging"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "28a3e467-1123-414e-8256-96a83096b16c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Suppress warnings\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "\n",
    "# Define an enhanced pattern-based chatbot\n",
    "class EnhancedPatternChatBot:\n",
    "    def __init__(self):\n",
    "        self.patterns = {\n",
    "            re.compile(r'hi|hello|hey', re.I): \"Hello! How can I help you today?\",\n",
    "            re.compile(r'how are you', re.I): \"I'm just a bot, but I'm doing great! How about you?\",\n",
    "            re.compile(r'what is your name', re.I): \"I am an enhanced pattern-based chatbot.\",\n",
    "            re.compile(r'tell me a joke', re.I): \"Why don't scientists trust atoms? Because they make up everything!\",\n",
    "            re.compile(r'bye|goodbye', re.I): \"Goodbye! Have a great day!\",\n",
    "            re.compile(r'capital of india', re.I): \"The capital of India is New Delhi.\",\n",
    "            re.compile(r'weather in (.*)', re.I): \"I'm sorry, I can't provide weather updates right now.\"\n",
    "        }\n",
    "    \n",
    "    def get_response(self, user_input):\n",
    "        for pattern, response in self.patterns.items():\n",
    "            if re.search(pattern, user_input):\n",
    "                return response\n",
    "        return \"I'm not sure how to respond to that. Can you please rephrase?\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b003d537-c8f5-4ff8-a305-ba3e9eac7fb6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Bot: Why don't scientists trust atoms? Because they make up everything!\n"
     ]
    }
   ],
   "source": [
    "# Define a function for the chatbot to handle user input\n",
    "def chat_with_bot(prompt, bot):\n",
    "    \"\"\"\n",
    "    Function to interact with the EnhancedPatternChatBot\n",
    "    :param prompt: User's input to the chatbot\n",
    "    :param bot: Instance of EnhancedPatternChatBot\n",
    "    :return: Response from the bot\n",
    "    \"\"\"\n",
    "    response = bot.get_response(prompt)\n",
    "    return response\n",
    "\n",
    "# Initialize the chatbot\n",
    "chatbot = EnhancedPatternChatBot()\n",
    "\n",
    "# Example usage of the chatbot function\n",
    "user_input = \"Tell me a joke.\"\n",
    "bot_response = chat_with_bot(user_input, chatbot)\n",
    "print(f\"Bot: {bot_response}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "3c55c554-449c-4bb8-a11d-385d7b1bb66a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Additional functionality: Logging user inputs and bot responses for future analysis\n",
    "def log_interaction(user_input, bot_response):\n",
    "    \"\"\"\n",
    "    Function to log interactions between user and chatbot\n",
    "    :param user_input: Input from the user\n",
    "    :param bot_response: Response from the bot\n",
    "    \"\"\"\n",
    "    logging.info(f\"User: {user_input}\")\n",
    "    logging.info(f\"Bot: {bot_response}\")\n",
    "\n",
    "# Example usage of logging\n",
    "log_interaction(user_input, bot_response)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "ea4ab550-b82b-4b77-83da-dfe31900c8b8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Enhanced chatbot interaction loop\n",
    "def chatbot_loop(bot):\n",
    "    \"\"\"\n",
    "    Function to create an interactive chatbot loop\n",
    "    \"\"\"\n",
    "    print(\"Welcome to the chatbot! Type 'exit' to end the conversation.\")\n",
    "    while True:\n",
    "        user_input = input(\"You: \")\n",
    "        if user_input.lower() == 'exit':\n",
    "            print(\"Goodbye!\")\n",
    "            break\n",
    "        bot_response = chat_with_bot(user_input, bot)\n",
    "        print(f\"Bot: {bot_response}\")\n",
    "        log_interaction(user_input, bot_response)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c6b00b5a-6902-44ce-ab57-9a27f2c70113",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcome to the chatbot! Type 'exit' to end the conversation.\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "You:  How ae you?\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Bot: I'm not sure how to respond to that. Can you please rephrase?\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "You:  How are you?\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Bot: I'm just a bot, but I'm doing great! How about you?\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "You:  What is your name?\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Bot: I am an enhanced pattern-based chatbot.\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "You:  Quit\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Bot: I'm not sure how to respond to that. Can you please rephrase?\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "You:  Exit\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Goodbye!\n"
     ]
    }
   ],
   "source": [
    "# chatbot checking\n",
    "chatbot_loop(chatbot)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6ab25c65-e6ce-4026-a7e3-465c811c0c17",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "50248aee-8792-4ef9-80f4-9c609c5ab169",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "2dac165e-4e95-42a9-a95b-44b4c05e1089",
   "metadata": {},
   "source": [
    "## Chatbot Using NLTK and Naive Bayes Classifier:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "cf7ece3b-8132-434c-a70e-f91d4f47aa35",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: nltk in /opt/anaconda3/lib/python3.12/site-packages (3.8.1)\n",
      "Requirement already satisfied: click in /opt/anaconda3/lib/python3.12/site-packages (from nltk) (8.1.7)\n",
      "Requirement already satisfied: joblib in /opt/anaconda3/lib/python3.12/site-packages (from nltk) (1.4.2)\n",
      "Requirement already satisfied: regex>=2021.8.3 in /opt/anaconda3/lib/python3.12/site-packages (from nltk) (2023.10.3)\n",
      "Requirement already satisfied: tqdm in /opt/anaconda3/lib/python3.12/site-packages (from nltk) (4.66.4)\n"
     ]
    }
   ],
   "source": [
    "!pip install nltk"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "afd409b2-af0c-4fcc-a1e0-131ca7bc13f3",
   "metadata": {},
   "outputs": [],
   "source": [
    "import nltk\n",
    "from nltk.classify import NaiveBayesClassifier\n",
    "from nltk.classify.util import accuracy\n",
    "import random\n",
    "import logging\n",
    "\n",
    "# Suppress warnings\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "59f27ce4-c4f9-4d4c-9b45-8191846c22fc",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package punkt to\n",
      "[nltk_data]     /Users/anmoltripathi/nltk_data...\n",
      "[nltk_data]   Package punkt is already up-to-date!\n",
      "[nltk_data] Downloading package averaged_perceptron_tagger to\n",
      "[nltk_data]     /Users/anmoltripathi/nltk_data...\n",
      "[nltk_data]   Unzipping taggers/averaged_perceptron_tagger.zip.\n"
     ]
    }
   ],
   "source": [
    "# Configure logging\n",
    "logging.basicConfig(level=logging.INFO)\n",
    "\n",
    "# Download necessary NLTK data\n",
    "nltk.download('punkt')\n",
    "nltk.download('averaged_perceptron_tagger')\n",
    "\n",
    "# Training data: list of tuples with (sentence, label)\n",
    "training_data = [\n",
    "    (\"Hello, how are you?\", \"greeting\"),\n",
    "    (\"Hi, what's up?\", \"greeting\"),\n",
    "    (\"Hey, how's it going?\", \"greeting\"),\n",
    "    (\"Goodbye!\", \"farewell\"),\n",
    "    (\"See you later.\", \"farewell\"),\n",
    "    (\"Bye!\", \"farewell\"),\n",
    "    (\"What is your name?\", \"name\"),\n",
    "    (\"Who are you?\", \"name\"),\n",
    "    (\"Tell me a joke.\", \"joke\"),\n",
    "    (\"Make me laugh.\", \"joke\"),\n",
    "    (\"Tell me something funny.\", \"joke\"),\n",
    "    (\"What is the capital of India?\", \"capital\"),\n",
    "    (\"Which city is the capital of India?\", \"capital\"),\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "1b3a9d92-b788-49cd-a46e-a287c3e76bf1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Features extractor: a function to extract features from the text\n",
    "def extract_features(text):\n",
    "    words = nltk.word_tokenize(text)\n",
    "    return {word.lower(): True for word in words}\n",
    "\n",
    "# Preparing training data for the classifier\n",
    "training_features = [(extract_features(text), label) for (text, label) in training_data]\n",
    "\n",
    "# Train the Naive Bayes classifier\n",
    "classifier = NaiveBayesClassifier.train(training_features)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "1bce76fa-7a1a-4f6e-a970-5a7d666c0469",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function to classify user input and generate a response\n",
    "def classify_and_respond(user_input):\n",
    "    features = extract_features(user_input)\n",
    "    label = classifier.classify(features)\n",
    "    responses = {\n",
    "        \"greeting\": [\"Hello! How can I help you today?\", \"Hi there! What can I do for you?\"],\n",
    "        \"farewell\": [\"Goodbye! Have a great day!\", \"See you later!\"],\n",
    "        \"name\": [\"I am a chatbot created using NLTK and Naive Bayes.\", \"You can call me NLTK Bot.\"],\n",
    "        \"joke\": [\"Why don't scientists trust atoms? Because they make up everything!\", \"What do you get if you cross a cat with a dark horse? Kitty Perry.\"],\n",
    "        \"capital\": [\"The capital of India is New Delhi.\", \"New Delhi is the capital of India.\"]\n",
    "    }\n",
    "    return random.choice(responses[label])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "455b48cf-c964-4579-9513-d96bc1c79bac",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Bot: What do you get if you cross a cat with a dark horse? Kitty Perry.\n"
     ]
    }
   ],
   "source": [
    "# Example usage\n",
    "user_input = \"Tell me a joke.\"\n",
    "response = classify_and_respond(user_input)\n",
    "print(f\"Bot: {response}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "54d4d388-e2b4-44af-8d4a-e52755693e16",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Additional functionality: Logging user inputs and bot responses for future analysis\n",
    "def log_interaction(user_input, bot_response):\n",
    "    \"\"\"\n",
    "    Function to log interactions between user and chatbot\n",
    "    :param user_input: Input from the user\n",
    "    :param bot_response: Response from the bot\n",
    "    \"\"\"\n",
    "    logging.info(f\"User: {user_input}\")\n",
    "    logging.info(f\"Bot: {bot_response}\")\n",
    "\n",
    "# Example usage of logging\n",
    "log_interaction(user_input, response)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "1bc333cf-cac9-4835-9a1f-d375cfa12db8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Enhanced chatbot interaction loop\n",
    "def chatbot_loop():\n",
    "    \"\"\"\n",
    "    Function to create an interactive chatbot loop\n",
    "    \"\"\"\n",
    "    print(\"Welcome to the chatbot! Type 'exit' to end the conversation.\")\n",
    "    while True:\n",
    "        user_input = input(\"You: \")\n",
    "        if user_input.lower() == 'exit':\n",
    "            print(\"Goodbye!\")\n",
    "            break\n",
    "        bot_response = classify_and_respond(user_input)\n",
    "        print(f\"Bot: {bot_response}\")\n",
    "        log_interaction(user_input, bot_response)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "a664170b-08fd-4a5f-ad3b-848550e8bb11",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcome to the chatbot! Type 'exit' to end the conversation.\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "You:  Capital of India?\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Bot: New Delhi is the capital of India.\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "You:  What is your name?\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Bot: I am a chatbot created using NLTK and Naive Bayes.\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "You:  How are you?\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Bot: Hi there! What can I do for you?\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "You:  Tell me something funny?\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Bot: Why don't scientists trust atoms? Because they make up everything!\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "You:  Exit\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Goodbye!\n"
     ]
    }
   ],
   "source": [
    "# chatbot checking\n",
    "chatbot_loop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5975dad4-85f6-4349-bac0-25c35f170696",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d5db1495-670f-4b18-9f48-4d0ef4877535",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "8355f592-fc4e-466b-98ac-8c08c996c87b",
   "metadata": {},
   "source": [
    "## Chatbot Generation Using OpenAI:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "88395780-0c78-42d0-9066-d7eb3646940f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import the necessary libraries\n",
    "from langchain.llms import OpenAI\n",
    "import logging \n",
    "import os\n",
    "import warnings\n",
    "\n",
    "# Suppress warnings\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f4796478-4451-40d2-8c58-68fb840f86ea",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set the OpenAI API key\n",
    "os.environ[\"OPEN_API_KEY\"] = \"*******\"  #(write your API key here)\n",
    "\n",
    "# Initialize the OpenAI language model\n",
    "llm = OpenAI(openai_api_key=os.environ[\"OPEN_API_KEY\"], temperature=0.6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "310f3f82-7fdd-4345-b6ec-b6caf6933e92",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function to interact with the OpenAI model\n",
    "def chat_with_openai(prompt):\n",
    "    \"\"\"\n",
    "    Function to interact with the OpenAI model\n",
    "    :param prompt: User's input to the chatbot\n",
    "    :return: Response from the OpenAI model\n",
    "    \"\"\"\n",
    "    response = llm.predict(prompt)\n",
    "    return response"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "57601aa5-a1b9-4bf5-85ed-6472e25bd77f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Enhanced chatbot interaction loop using OpenAI\n",
    "def chatbot_loop():\n",
    "    \"\"\"\n",
    "    Function to create an interactive chatbot loop using OpenAI\n",
    "    \"\"\"\n",
    "    print(\"Welcome to the chatbot! Type 'exit' to end the conversation.\")\n",
    "    while True:\n",
    "        user_input = input(\"You: \")\n",
    "        if user_input.lower() == 'exit':\n",
    "            print(\"Goodbye!\")\n",
    "            break\n",
    "        bot_response = chat_with_openai(user_input)\n",
    "        print(f\"Bot: {bot_response}\")\n",
    "        log_interaction(user_input, bot_response)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "13091008-a2ab-422d-8156-e623e1eb61dc",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function to log interactions\n",
    "def log_interaction(user_input, bot_response):\n",
    "    \"\"\"\n",
    "    Function to log interactions between user and chatbot\n",
    "    :param user_input: Input from the user\n",
    "    :param bot_response: Response from the bot\n",
    "    \"\"\"\n",
    "    logging.info(f\"User: {user_input}\")\n",
    "    logging.info(f\"Bot: {bot_response}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "69511f09-ed4e-4e46-8869-42d75b91bb1a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcome to the chatbot! Type 'exit' to end the conversation.\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "You:  Cricket world cup winner of 2019?\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Bot: \n",
      "\n",
      "England\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "You:  Exit\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Goodbye!\n"
     ]
    }
   ],
   "source": [
    "# Start the chatbot loop\n",
    "chatbot_loop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7824afbf-bc81-4e64-ba5a-f976c3a69b2f",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
